// source: access_token.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var error_pb = require('./error_pb.js');
goog.object.extend(proto, error_pb);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenErrorResponseRequest', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenErrorResponseResponse', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenErrorResponseResponse.ResponseCase', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenSuccessResponseRequest', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenSuccessResponseResponse', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenSuccessResponseResponse.ResponseCase', null, global);
goog.exportSymbol('proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success', null, global);
goog.exportSymbol('proto.openid4vci.EvaluateAccessTokenRequestRequest', null, global);
goog.exportSymbol('proto.openid4vci.EvaluateAccessTokenRequestResponse', null, global);
goog.exportSymbol('proto.openid4vci.EvaluateAccessTokenRequestResponse.ResponseCase', null, global);
goog.exportSymbol('proto.openid4vci.EvaluateAccessTokenRequestResponse.Success', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openid4vci.CreateAccessTokenErrorResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.CreateAccessTokenErrorResponseRequest.displayName = 'proto.openid4vci.CreateAccessTokenErrorResponseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.openid4vci.CreateAccessTokenErrorResponseResponse.oneofGroups_);
};
goog.inherits(proto.openid4vci.CreateAccessTokenErrorResponseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.CreateAccessTokenErrorResponseResponse.displayName = 'proto.openid4vci.CreateAccessTokenErrorResponseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.displayName = 'proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openid4vci.CreateAccessTokenSuccessResponseRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.CreateAccessTokenSuccessResponseRequest.displayName = 'proto.openid4vci.CreateAccessTokenSuccessResponseRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.openid4vci.CreateAccessTokenSuccessResponseResponse.oneofGroups_);
};
goog.inherits(proto.openid4vci.CreateAccessTokenSuccessResponseResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.CreateAccessTokenSuccessResponseResponse.displayName = 'proto.openid4vci.CreateAccessTokenSuccessResponseResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.displayName = 'proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openid4vci.EvaluateAccessTokenRequestRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.EvaluateAccessTokenRequestRequest.displayName = 'proto.openid4vci.EvaluateAccessTokenRequestRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.openid4vci.EvaluateAccessTokenRequestResponse.oneofGroups_);
};
goog.inherits(proto.openid4vci.EvaluateAccessTokenRequestResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.EvaluateAccessTokenRequestResponse.displayName = 'proto.openid4vci.EvaluateAccessTokenRequestResponse';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.openid4vci.EvaluateAccessTokenRequestResponse.Success, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.displayName = 'proto.openid4vci.EvaluateAccessTokenRequestResponse.Success';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.CreateAccessTokenErrorResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    error: jspb.Message.getFieldWithDefault(msg, 1, ""),
    errorDescription: jspb.Message.getFieldWithDefault(msg, 2, ""),
    errorUri: jspb.Message.getFieldWithDefault(msg, 3, ""),
    errorAdditionalDetails: msg.getErrorAdditionalDetails_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.CreateAccessTokenErrorResponseRequest;
  return proto.openid4vci.CreateAccessTokenErrorResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setError(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorDescription(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setErrorUri(value);
      break;
    case 4:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrorAdditionalDetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.CreateAccessTokenErrorResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getError();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeString(
      3,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeBytes(
      4,
      f
    );
  }
};


/**
 * optional string error = 1;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.getError = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.setError = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string error_description = 2;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.getErrorDescription = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.setErrorDescription = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.clearErrorDescription = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.hasErrorDescription = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string error_uri = 3;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.getErrorUri = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.setErrorUri = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.clearErrorUri = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.hasErrorUri = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bytes error_additional_details = 4;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.getErrorAdditionalDetails = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * optional bytes error_additional_details = 4;
 * This is a type-conversion wrapper around `getErrorAdditionalDetails()`
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.getErrorAdditionalDetails_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrorAdditionalDetails()));
};


/**
 * optional bytes error_additional_details = 4;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrorAdditionalDetails()`
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.getErrorAdditionalDetails_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrorAdditionalDetails()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.setErrorAdditionalDetails = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.clearErrorAdditionalDetails = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenErrorResponseRequest.prototype.hasErrorAdditionalDetails = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2
};

/**
 * @return {proto.openid4vci.CreateAccessTokenErrorResponseResponse.ResponseCase}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.getResponseCase = function() {
  return /** @type {proto.openid4vci.CreateAccessTokenErrorResponseResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.openid4vci.CreateAccessTokenErrorResponseResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.CreateAccessTokenErrorResponseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.toObject(includeInstance, f),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.CreateAccessTokenErrorResponseResponse;
  return proto.openid4vci.CreateAccessTokenErrorResponseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success;
      reader.readMessage(value,proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.CreateAccessTokenErrorResponseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
    errorResponse: msg.getErrorResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success;
  return proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setErrorResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getErrorResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes error_response = 1;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.prototype.getErrorResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes error_response = 1;
 * This is a type-conversion wrapper around `getErrorResponse()`
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.prototype.getErrorResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getErrorResponse()));
};


/**
 * optional bytes error_response = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getErrorResponse()`
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.prototype.getErrorResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getErrorResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success.prototype.setErrorResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Success success = 1;
 * @return {?proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.getSuccess = function() {
  return /** @type{?proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success} */ (
    jspb.Message.getWrapperField(this, proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success, 1));
};


/**
 * @param {?proto.openid4vci.CreateAccessTokenErrorResponseResponse.Success|undefined} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} returns this
*/
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.openid4vci.CreateAccessTokenErrorResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.openid4vci.Error}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.getError = function() {
  return /** @type{?proto.openid4vci.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/**
 * @param {?proto.openid4vci.Error|undefined} value
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} returns this
*/
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.openid4vci.CreateAccessTokenErrorResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenErrorResponseResponse} returns this
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenErrorResponseResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.CreateAccessTokenSuccessResponseRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessToken: jspb.Message.getFieldWithDefault(msg, 1, ""),
    tokenType: jspb.Message.getFieldWithDefault(msg, 2, ""),
    expiresIn: jspb.Message.getFieldWithDefault(msg, 3, 0),
    scope: jspb.Message.getFieldWithDefault(msg, 4, ""),
    cNonce: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cNonceExpiresIn: jspb.Message.getFieldWithDefault(msg, 6, 0),
    authorizationPending: jspb.Message.getBooleanFieldWithDefault(msg, 7, false),
    interval: jspb.Message.getFieldWithDefault(msg, 8, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.CreateAccessTokenSuccessResponseRequest;
  return proto.openid4vci.CreateAccessTokenSuccessResponseRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAccessToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setTokenType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setExpiresIn(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setScope(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCNonce(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCNonceExpiresIn(value);
      break;
    case 7:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setAuthorizationPending(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInterval(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.CreateAccessTokenSuccessResponseRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTokenType();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 4));
  if (f != null) {
    writer.writeString(
      4,
      f
    );
  }
  f = /** @type {string} */ (jspb.Message.getField(message, 5));
  if (f != null) {
    writer.writeString(
      5,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 6));
  if (f != null) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = /** @type {boolean} */ (jspb.Message.getField(message, 7));
  if (f != null) {
    writer.writeBool(
      7,
      f
    );
  }
  f = /** @type {number} */ (jspb.Message.getField(message, 8));
  if (f != null) {
    writer.writeUint32(
      8,
      f
    );
  }
};


/**
 * optional string access_token = 1;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getAccessToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setAccessToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string token_type = 2;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getTokenType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setTokenType = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional uint32 expires_in = 3;
 * @return {number}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getExpiresIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setExpiresIn = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.clearExpiresIn = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.hasExpiresIn = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional string scope = 4;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getScope = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setScope = function(value) {
  return jspb.Message.setField(this, 4, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.clearScope = function() {
  return jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.hasScope = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional string c_nonce = 5;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getCNonce = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setCNonce = function(value) {
  return jspb.Message.setField(this, 5, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.clearCNonce = function() {
  return jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.hasCNonce = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional uint32 c_nonce_expires_in = 6;
 * @return {number}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getCNonceExpiresIn = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setCNonceExpiresIn = function(value) {
  return jspb.Message.setField(this, 6, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.clearCNonceExpiresIn = function() {
  return jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.hasCNonceExpiresIn = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional bool authorization_pending = 7;
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getAuthorizationPending = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 7, false));
};


/**
 * @param {boolean} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setAuthorizationPending = function(value) {
  return jspb.Message.setField(this, 7, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.clearAuthorizationPending = function() {
  return jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.hasAuthorizationPending = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional uint32 interval = 8;
 * @return {number}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.getInterval = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.setInterval = function(value) {
  return jspb.Message.setField(this, 8, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseRequest} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.clearInterval = function() {
  return jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseRequest.prototype.hasInterval = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2
};

/**
 * @return {proto.openid4vci.CreateAccessTokenSuccessResponseResponse.ResponseCase}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.getResponseCase = function() {
  return /** @type {proto.openid4vci.CreateAccessTokenSuccessResponseResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.openid4vci.CreateAccessTokenSuccessResponseResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.CreateAccessTokenSuccessResponseResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.toObject(includeInstance, f),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.CreateAccessTokenSuccessResponseResponse;
  return proto.openid4vci.CreateAccessTokenSuccessResponseResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success;
      reader.readMessage(value,proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.CreateAccessTokenSuccessResponseResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
    successResponse: msg.getSuccessResponse_asB64(),
    createdAt: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success;
  return proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSuccessResponse(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCreatedAt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = message.getCreatedAt();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional bytes success_response = 1;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.getSuccessResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes success_response = 1;
 * This is a type-conversion wrapper around `getSuccessResponse()`
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.getSuccessResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSuccessResponse()));
};


/**
 * optional bytes success_response = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSuccessResponse()`
 * @return {!Uint8Array}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.getSuccessResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSuccessResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.setSuccessResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional string created_at = 2;
 * @return {string}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.getCreatedAt = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success.prototype.setCreatedAt = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Success success = 1;
 * @return {?proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.getSuccess = function() {
  return /** @type{?proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success} */ (
    jspb.Message.getWrapperField(this, proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success, 1));
};


/**
 * @param {?proto.openid4vci.CreateAccessTokenSuccessResponseResponse.Success|undefined} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} returns this
*/
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.openid4vci.CreateAccessTokenSuccessResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.openid4vci.Error}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.getError = function() {
  return /** @type{?proto.openid4vci.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/**
 * @param {?proto.openid4vci.Error|undefined} value
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} returns this
*/
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.openid4vci.CreateAccessTokenSuccessResponseResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openid4vci.CreateAccessTokenSuccessResponseResponse} returns this
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.CreateAccessTokenSuccessResponseResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.EvaluateAccessTokenRequestRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    accessTokenRequest: msg.getAccessTokenRequest_asB64(),
    credentialOffer: msg.getCredentialOffer_asB64(),
    evaluateAccessTokenRequestOptions: msg.getEvaluateAccessTokenRequestOptions_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.EvaluateAccessTokenRequestRequest;
  return proto.openid4vci.EvaluateAccessTokenRequestRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setAccessTokenRequest(value);
      break;
    case 2:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setCredentialOffer(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setEvaluateAccessTokenRequestOptions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.EvaluateAccessTokenRequestRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAccessTokenRequest_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 2));
  if (f != null) {
    writer.writeBytes(
      2,
      f
    );
  }
  f = /** @type {!(string|Uint8Array)} */ (jspb.Message.getField(message, 3));
  if (f != null) {
    writer.writeBytes(
      3,
      f
    );
  }
};


/**
 * optional bytes access_token_request = 1;
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getAccessTokenRequest = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes access_token_request = 1;
 * This is a type-conversion wrapper around `getAccessTokenRequest()`
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getAccessTokenRequest_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getAccessTokenRequest()));
};


/**
 * optional bytes access_token_request = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getAccessTokenRequest()`
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getAccessTokenRequest_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getAccessTokenRequest()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.setAccessTokenRequest = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional bytes credential_offer = 2;
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getCredentialOffer = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * optional bytes credential_offer = 2;
 * This is a type-conversion wrapper around `getCredentialOffer()`
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getCredentialOffer_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getCredentialOffer()));
};


/**
 * optional bytes credential_offer = 2;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getCredentialOffer()`
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getCredentialOffer_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getCredentialOffer()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.setCredentialOffer = function(value) {
  return jspb.Message.setField(this, 2, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.clearCredentialOffer = function() {
  return jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.hasCredentialOffer = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bytes evaluate_access_token_request_options = 3;
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getEvaluateAccessTokenRequestOptions = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes evaluate_access_token_request_options = 3;
 * This is a type-conversion wrapper around `getEvaluateAccessTokenRequestOptions()`
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getEvaluateAccessTokenRequestOptions_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getEvaluateAccessTokenRequestOptions()));
};


/**
 * optional bytes evaluate_access_token_request_options = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getEvaluateAccessTokenRequestOptions()`
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.getEvaluateAccessTokenRequestOptions_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getEvaluateAccessTokenRequestOptions()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.setEvaluateAccessTokenRequestOptions = function(value) {
  return jspb.Message.setField(this, 3, value);
};


/**
 * Clears the field making it undefined.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestRequest} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.clearEvaluateAccessTokenRequestOptions = function() {
  return jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.EvaluateAccessTokenRequestRequest.prototype.hasEvaluateAccessTokenRequestOptions = function() {
  return jspb.Message.getField(this, 3) != null;
};



/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.oneofGroups_ = [[1,2]];

/**
 * @enum {number}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.ResponseCase = {
  RESPONSE_NOT_SET: 0,
  SUCCESS: 1,
  ERROR: 2
};

/**
 * @return {proto.openid4vci.EvaluateAccessTokenRequestResponse.ResponseCase}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.getResponseCase = function() {
  return /** @type {proto.openid4vci.EvaluateAccessTokenRequestResponse.ResponseCase} */(jspb.Message.computeOneofCase(this, proto.openid4vci.EvaluateAccessTokenRequestResponse.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.EvaluateAccessTokenRequestResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    success: (f = msg.getSuccess()) && proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.toObject(includeInstance, f),
    error: (f = msg.getError()) && error_pb.Error.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.EvaluateAccessTokenRequestResponse;
  return proto.openid4vci.EvaluateAccessTokenRequestResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.openid4vci.EvaluateAccessTokenRequestResponse.Success;
      reader.readMessage(value,proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.deserializeBinaryFromReader);
      msg.setSuccess(value);
      break;
    case 2:
      var value = new error_pb.Error;
      reader.readMessage(value,error_pb.Error.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.EvaluateAccessTokenRequestResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccess();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      error_pb.Error.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.prototype.toObject = function(opt_includeInstance) {
  return proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestResponse.Success} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.toObject = function(includeInstance, msg) {
  var f, obj = {
    successResponse: msg.getSuccessResponse_asB64()
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse.Success}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.openid4vci.EvaluateAccessTokenRequestResponse.Success;
  return proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestResponse.Success} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse.Success}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setSuccessResponse(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.openid4vci.EvaluateAccessTokenRequestResponse.Success} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSuccessResponse_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      1,
      f
    );
  }
};


/**
 * optional bytes success_response = 1;
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.prototype.getSuccessResponse = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * optional bytes success_response = 1;
 * This is a type-conversion wrapper around `getSuccessResponse()`
 * @return {string}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.prototype.getSuccessResponse_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getSuccessResponse()));
};


/**
 * optional bytes success_response = 1;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getSuccessResponse()`
 * @return {!Uint8Array}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.prototype.getSuccessResponse_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getSuccessResponse()));
};


/**
 * @param {!(string|Uint8Array)} value
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse.Success} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.Success.prototype.setSuccessResponse = function(value) {
  return jspb.Message.setProto3BytesField(this, 1, value);
};


/**
 * optional Success success = 1;
 * @return {?proto.openid4vci.EvaluateAccessTokenRequestResponse.Success}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.getSuccess = function() {
  return /** @type{?proto.openid4vci.EvaluateAccessTokenRequestResponse.Success} */ (
    jspb.Message.getWrapperField(this, proto.openid4vci.EvaluateAccessTokenRequestResponse.Success, 1));
};


/**
 * @param {?proto.openid4vci.EvaluateAccessTokenRequestResponse.Success|undefined} value
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse} returns this
*/
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.setSuccess = function(value) {
  return jspb.Message.setOneofWrapperField(this, 1, proto.openid4vci.EvaluateAccessTokenRequestResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.clearSuccess = function() {
  return this.setSuccess(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.hasSuccess = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Error error = 2;
 * @return {?proto.openid4vci.Error}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.getError = function() {
  return /** @type{?proto.openid4vci.Error} */ (
    jspb.Message.getWrapperField(this, error_pb.Error, 2));
};


/**
 * @param {?proto.openid4vci.Error|undefined} value
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse} returns this
*/
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.setError = function(value) {
  return jspb.Message.setOneofWrapperField(this, 2, proto.openid4vci.EvaluateAccessTokenRequestResponse.oneofGroups_[0], value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.openid4vci.EvaluateAccessTokenRequestResponse} returns this
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.clearError = function() {
  return this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.openid4vci.EvaluateAccessTokenRequestResponse.prototype.hasError = function() {
  return jspb.Message.getField(this, 2) != null;
};


goog.object.extend(exports, proto.openid4vci);
